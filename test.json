{
  "Comment": "State machine to manage SageMaker Pipeline execution",
  "StartAt": "Check Pipeline Exists",
  "States": {
    "Check Pipeline Exists": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.pipeline_name",
          "IsPresent": true,
          "Next": "Get Pipeline"
        }
      ],
      "Default": "Failed - Missing Pipeline Name"
    },
    "Get Pipeline": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:sagemaker:listPipelines",
      "Parameters": {
        "PipelineNamePrefix.$": "$.pipeline_name"
      },
      "ResultPath": "$.listPipelinesOutput",
      "Next": "Check If Pipeline Exists"
    },
    "Check If Pipeline Exists": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.listPipelinesOutput.PipelineSummaries[0]",
          "IsPresent": true,
          "Next": "Start Pipeline Execution"
        }
      ],
      "Default": "Create Pipeline"
    },
    "Create Pipeline": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:sagemaker:createPipeline",
      "Parameters": {
        "PipelineName.$": "$.pipeline_name",
        "PipelineDefinition.$": "$.pipeline_definition",
        "RoleArn.$": "$.role_arn"
      },
      "Next": "Start Pipeline Execution",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "Notify Pipeline Creation Failed"
        }
      ]
    },
    "Start Pipeline Execution": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sagemaker:startPipelineExecution.sync",
      "Parameters": {
        "PipelineName.$": "$.pipeline_name"
      },
      "Next": "Check Pipeline Status",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "Notify Pipeline Execution Failed"
        }
      ]
    },
    "Check Pipeline Status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:sagemaker:describeTransform",
      "Parameters": {
        "PipelineExecutionArn.$": "$.PipelineExecutionArn"
      },
      "Next": "Evaluate Pipeline Status",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "Notify Status Check Failed"
        }
      ]
    },
    "Evaluate Pipeline Status": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.TransformJobStatus",
          "StringEquals": "Completed",
          "Next": "Notify Success"
        },
        {
          "Variable": "$.TransformJobStatus",
          "StringEquals": "Failed",
          "Next": "Notify Pipeline Failed"
        },
        {
          "Variable": "$.TransformJobStatus",
          "StringEquals": "Stopped",
          "Next": "Notify Pipeline Stopped"
        }
      ],
      "Default": "Wait For Pipeline"
    },
    "Wait For Pipeline": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Check Pipeline Status"
    },
    "Notify Success": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${NotificationLambdaArn}",
        "Payload": {
          "status": "SUCCESS",
          "pipeline_name.$": "$.pipeline_name",
          "execution_id.$": "$.PipelineExecutionArn"
        }
      },
      "End": true
    },
    "Notify Pipeline Failed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${NotificationLambdaArn}",
        "Payload": {
          "status": "FAILED",
          "pipeline_name.$": "$.pipeline_name",
          "execution_id.$": "$.PipelineExecutionArn",
          "failed_step.$": "$.FailedStep",
          "error_message.$": "$.FailureReason"
        }
      },
      "End": true
    },
    "Notify Pipeline Creation Failed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${NotificationLambdaArn}",
        "Payload": {
          "status": "FAILED",
          "pipeline_name.$": "$.pipeline_name",
          "error": "Pipeline creation failed",
          "error_details.$": "$.error"
        }
      },
      "End": true
    },
    "Notify Pipeline Execution Failed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${NotificationLambdaArn}",
        "Payload": {
          "status": "FAILED",
          "pipeline_name.$": "$.pipeline_name",
          "error": "Pipeline execution failed to start",
          "error_details.$": "$.error"
        }
      },
      "End": true
    },
    "Notify Status Check Failed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${NotificationLambdaArn}",
        "Payload": {
          "status": "FAILED",
          "pipeline_name.$": "$.pipeline_name",
          "error": "Failed to check pipeline status",
          "error_details.$": "$.error"
        }
      },
      "End": true
    },
    "Notify Pipeline Stopped": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${NotificationLambdaArn}",
        "Payload": {
          "status": "STOPPED",
          "pipeline_name.$": "$.pipeline_name",
          "execution_id.$": "$.PipelineExecutionArn"
        }
      },
      "End": true
    },
    "Failed - Missing Pipeline Name": {
      "Type": "Fail",
      "Error": "MissingPipelineName",
      "Cause": "Pipeline name not provided in input"
    }
  }
}
